#!/bin/sh
#-------------------------------------------------------------------------+
# Copyright (C) 2014 Peter Toth (pannon)
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

if [ "${1}" = "--version" -o "${1}" = "version" ] ; then
    echo "iocage 1.5.2 (2015/04/07)"
    exit 0
fi

# This must be set to the location of the iocage library folder
LIBPATH="lib"

. "${LIBPATH}/basejail.sh"
. "${LIBPATH}/exec.sh"
. "${LIBPATH}/fetch.sh"
. "${LIBPATH}/help.sh"
. "${LIBPATH}/importexport.sh"
. "${LIBPATH}/management.sh"
. "${LIBPATH}/record.sh"
. "${LIBPATH}/networking.sh"
. "${LIBPATH}/properties.sh"
. "${LIBPATH}/rc_d.sh"
. "${LIBPATH}/rctl.sh"
. "${LIBPATH}/runstop.sh"
. "${LIBPATH}/setup.sh"
. "${LIBPATH}/zfs.sh"

# core must be sourced last
. "${LIBPATH}/core.sh"


# Check if the system has ZFS available. That is required for iocage to work properly.
# Exit if it doesn't.
if [ "$(zpool list)" = 'no pools available' ] ; then
    echo "  ERROR: ZFS is required for iocage to work and I can't find any pools available."
    exit 1
fi

if [ -z "${1}" ] ; then
    __usage
    exit 0
fi

if [ "${1}" == "help" ] ; then
    __help
    exit 0
fi


if [ "$(whoami)" != "root" ] ; then
    echo "* Only root can manage jails!"
    exit 1
fi

__find_mypool
__parse_cmd "${@}"
