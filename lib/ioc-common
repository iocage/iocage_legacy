#!/bin/sh

# Export every property specified on command line ----------------------
__export_props () {
    local _pname

    for i in "$@" ; do
        if [ "$(echo $i | grep -e ".*=.*")" ] ; then
            _pname="$(echo $i|awk 'BEGIN { FS = "=" } ; { print $1 }')"
            __validate_pname $_pname
            export "$i"
            export "iocset_${i}"
        fi
    done

    if [ "$tag" == 'default' ] && ([ "$1" != 'set' ] || [ "$1" != 'get' ]); then
        tag=$(date "+%F@%T")
        echo "  WARNING: tag value \"default\" is a reserved keyword"
        echo "           tag was changed to: $tag"
    fi
}

# Set properties ------------------------------------------------------
__set_jail_prop () {
    local _name _property _dataset _pname _pval _found _CONF \
          _type

    _name="$2"
    _property="$1"

    if [ -z "${_name}" -o -z "${_property}" ] ; then
        __die "missing property or UUID!"
    fi

    if [ "$3" ] ; then
        _dataset="$3"
    else
        _dataset="$(__find_jail ${_name})" || exit $?
    fi

    if [ -z "${_dataset}" ] ; then
        __die "${_name} not found!"
    fi

    _fulluuid="$(__check_name ${_name})"

    _pname="$(echo ${_property}|awk 'BEGIN { FS = "=" } ; { print $1 }')"
    _pval="$(echo ${_property}|awk 'BEGIN { FS = "=" } ; { print $2 }')"

    if [ -z "${_pname}" -o -z "${_pval}" ] ; then
        __die "set failed, incorrect property syntax!"
    fi

    _type="$(__validate_pname ${_pname} type)" || exit $?

    if [ "${_type}" = "custom" ] ; then
        zfs set org.freebsd.iocage:${_pname}="${_pval}" ${_dataset}
    elif [ "${_type}" = "native" ] ; then
        zfs set ${_pname}="${_pval}" ${_dataset}
    fi

    if [ "${_pname}" = "tag" ] ; then
        __unlink_tag ${_dataset}
        __link_tag ${_dataset}
    fi

    if [ "${_pname}" = "jail_zfs" ] ; then
        _jailed_dataset="${_dataset}/data"
        _jailed_dataset_check="$(zfs get -H creation ${_jailed_dataset} > \
                              /dev/null 2>&1 ; echo $?)"
        if [ "${_jailed_dataset_check}" != "0" ] ; then
            zfs create -o compression=lz4 -o mountpoint=none -o jailed=on \
                ${_dataset}/data
        fi
    # Do they want bpf exposed?
    elif [ "${_pname}" = "bpf" ] ; then
        if [ "${_devfs_string}" != "0" ] ; then
            __bpf_devfs >> /etc/devfs.rules
            service devfs restart 1> /dev/null
        fi
    elif [ "${_pname}" = "notes" ] ; then
        zfs set org.freebsd.iocage:${_pname}="${notes}" ${_dataset}
    elif [ "${_pname}" = "template" ] ; then
        if [ "${_pval}" = "yes" ] ; then
            __unlink_tag "${_dataset}"
            _tag="$(__get_jail_prop tag ${_fulluuid} ${_dataset})"
            zfs set org.freebsd.iocage:type="template" "${_dataset}"
            zfs rename -f "${pool}${iocroot}/jails/${_fulluuid}" \
                          "${pool}${iocroot}/base/${_tag}"
        elif [ "${_pval}" = "no" ] ; then
            _tag="$(__get_jail_prop tag ${_fulluuid} ${_dataset})"
            zfs set org.freebsd.iocage:type="basejail" "${_dataset}"
            zfs rename -f "${pool}${iocroot}/base/${_tag}" \
                          "${pool}${iocroot}/jails/${_fulluuid}"
            _dataset="${pool}${iocroot}/jails/${_fulluuid}"
            __link_tag "${_dataset}"
        fi
    fi
}

__validate_pname () {
    local _prop _pname _found

    _pname="$1"
    _type="$2"
    _found=0

    _CONF="$CONF_NET
           $CONF_JAIL
           $CONF_RCTL
           $CONF_CUSTOM
           $CONF_SYNC
           $CONF_FTP
           $CONF_GIT"

    for _prop in $_CONF ; do
        if [ "$_prop" == "$_pname" ] ; then
            _found=1
            if [ $_type ] ; then
                echo "custom"
            fi
            break
        fi
    done

    for _prop in $CONF_ZFS ; do
        if [ "$_prop" == "$_pname" ] ; then
            _found=1
            if [ $_type ] ; then
                echo "native"
            fi
            break
        fi
    done

    if [ $_found -ne "1" ] ; then
        __die "unsupported property: $_pname!"
    fi
}

__console () {
    local _name _dataset _fulluuid _login_flags _jexec _exec_fib \
          _state

    _name=$1

    if [ -z $_name ] ; then
        __die "missing UUID!"
    fi

    _dataset=$(__find_jail $_name) || exit $?

    if [ -z $_dataset ] ; then
        __die "$_name not found!"
    fi

    _fulluuid="$(__check_name $_name)"
    _state=$(__is_running $_fulluuid)
    _login_flags=$(zfs get -H -o value org.freebsd.iocage:login_flags \
                  $pool/iocage/jails/$_fulluuid)

    _exec_fib=$(zfs get -H -o value org.freebsd.iocage:exec_fib \
                  $pool/iocage/jails/$_fulluuid)

    _jexec="jexec"
    if [ $_exec_fib -ne "0" ] ; then
        _jexec="setfib $_exec_fib jexec"
    fi

    if [ "$_state" ] ; then
        $_jexec ioc-${_fulluuid} login $_login_flags
    else
        __die "jail: $_name is not running!"
    fi
}

__exec () {
    local _jexecopts _name _dataset _fulluuid _jexec _exec_fib
    _jexecopts=

    # check for -U or -u to pass to jexec
    while getopts u:U: opt "$@"; do
        case "$opt" in
            [uU]) _jexecopts="$_jexecopts -$opt $OPTARG";;
            ?)    __die "invalid exec option: $opt"
                  ;;
        esac
    done
    shift $(expr $OPTIND - 1)

    _name=$1
    shift

    if [ -z $_name ] ; then
        __die "missing UUID!"
    elif [ $_name == ALL ]; then
        local _jails _fulluuid
        _jails="$(__find_jail ALL)"

        for jail in $_jails ; do
            _fulluuid="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $jail)"
            jexec $_jexecopts ioc-${_fulluuid} "$@"
        done

        exit 0
    fi

    _dataset=$(__find_jail $_name) || exit $?

    if [ -z $_dataset ] ; then
        __die "$_name not found!"
    fi

    _fulluuid="$(__check_name $_name)"

    _exec_fib=$(zfs get -H -o value org.freebsd.iocage:exec_fib \
                  $pool/iocage/jails/$_fulluuid)

    _jexec="jexec"
    if [ $_exec_fib -ne "0" ] ; then
        _jexec="setfib $_exec_fib jexec"
    fi

    $_jexec $_jexecopts ioc-${_fulluuid} "$@"
}

__chroot () {
    local _name _command
    shift
    _name="$1"
    shift
    _command="$@"

    if [ -z $_name ] ; then
        __die "missing UUID!"
    fi

    _dataset=$(__find_jail $_name) || exit $?

    if [ -z $_dataset ] ; then
        __die "$_name not found!"
    fi

    _fulluuid="$(__check_name $_name)"
    _jailroot="$(zfs get -Ho value mountpoint $_dataset)"
    _jail_type="$(__get_jail_prop type ${_fulluuid})"
    _state="$(__is_running ${_fulluuid} ; echo $?)"

    # If the jail is a basejail, mount all the overlays
    if [ "${_jail_type}" == "basejail" ] ; then
        if [ "${_state}" == "0" ] ; then
            mount -t unionfs -o noatime,copymode=transparent \
                ${iocroot}/jails/${_fulluuid}/_/etc \
                ${iocroot}/jails/${_fulluuid}/root/etc
            mount -t unionfs -o noatime,copymode=transparent \
                ${iocroot}/jails/${_fulluuid}/_/root \
                ${iocroot}/jails/${_fulluuid}/root/root
            mount -t unionfs -o noatime,copymode=transparent \
                ${iocroot}/jails/${_fulluuid}/_/usr/home \
                ${iocroot}/jails/${_fulluuid}/root/usr/home
            mount -t unionfs -o noatime,copymode=transparent \
                ${iocroot}/jails/${_fulluuid}/_/usr/local \
                ${iocroot}/jails/${_fulluuid}/root/usr/local
            mount -t unionfs -o noatime,copymode=transparent \
                ${iocroot}/jails/${_fulluuid}/_/var \
                ${iocroot}/jails/${_fulluuid}/root/var
            mount -t tmpfs tmpfs ${iocroot}/jails/${_fulluuid}/root/tmp

        # Check to make sure the ports directory exists
        if [ ! -e "${iocroot}/jails/${_fulluuid}/_/usr/ports" ] ; then
            mkdir "${iocroot}/jails/${_fulluuid}/_/usr/ports"
        fi

        # Mount the rest
        mount -t unionfs -o noatime,copymode=transparent \
            ${iocroot}/jails/${_fulluuid}/_/usr/ports \
            ${iocroot}/jails/${_fulluuid}/root/usr/ports
        fi
    fi

    chroot ${_jailroot}/root $_command

    # Unmount the overlays from before
    if [ "${_jail_type}" = "basejail" -o "${_jail_type}" = "clonejail" ] ; then
        if [ "${_state}" = "0" ] ; then
            __umount_basejail "${_fulluuid}"
        fi
    fi
}

# Fetch release and prepare base ZFS filesystems-----------
__fetch_release () {
    local _rel_exist _release _host_release _non_interactive _dist

    _release=$(uname -r|cut -f 1,2 -d'-')
    # Needed to check for PC-BSD import
    _host_release=$(uname -r|cut -f 1,2 -d'-')

    if [ -z "${iocset_release}" ] ; then
        __print_release
        echo -n "Please select a release [${_release}]: "
        read _answer

        if [ -z "${_answer}" ] ; then
            _answer="${_release}"
        else
            _release="${_answer}"
            for _rel in $(echo ${supported}) ; do
                if [ "${_answer}" == "${_rel}" ] ; then
                    _release="${_rel}"
                    match="1"
                    break
                fi
            done

            if [ -z ${match} ] ; then
                echo "Invalid release ${_release} specified, exiting.." >&2
                exit 1
            fi
        fi
    else
        _release="${iocset_release}"
    fi


    _rel_exist=$(zfs list -H | grep -w ^${pool}${iocroot}/base/${_release})

    if [ -z "${_rel_exist}" ] ; then
        zfs create -o compression=lz4 -p ${pool}${iocroot}/base/${_release}/root
        zfs create -o compression=lz4 -p ${pool}${iocroot}/download/${_release}
    fi

    if [ -z "${ftpdir}" ] ; then
        ftpdir="/pub/FreeBSD/releases/amd64/${_release}"
    fi

    if [ -e "/usr/local/tmp/iocage-dist" -a "${_release}" = "${_host_release}" ] ; then
        cd "/usr/local/tmp/iocage-dist"
        _dist=1
    else
        cd ${iocroot}/download/${_release}
        _dist=0
    fi

    for _file in ${ftpfiles} ; do
        if [ ! -e "${_file}" ] ; then
            fetch http://${ftphost}${ftpdir}/${_file}
            if [ $? -ne 0 ] ; then
                echo "Failed fetching ${_file}.." >&2
                return 1
            fi
        fi
    done

    for _file in $(echo ${ftpfiles}) ; do
        if [ -e "${_file}" ] ; then
            echo "Extracting: ${_file}"
            chflags -R noschg ${iocroot}/base/${_release}/root
            tar -C ${iocroot}/base/${_release}/root -xf ${_file}
        fi
    done

    # Create these dirs for basejails
    mkdir ${iocroot}/base/${_release}/root/usr/home > /dev/null 2>&1
    cd ${iocroot}/base/${_release}/root && ln -s usr/home home 2>&1
    mkdir ${iocroot}/base/${_release}/root/usr/ports > /dev/null 2>&1

    echo "* Updating base jail template."
    sleep 2

    if [ -e ${iocroot}/base/${_release}/root/etc/freebsd-update.conf ] ; then
        sed -i '' 's/Components src world kernel/Components world kernel/' \
            ${iocroot}/base/${_release}/root/etc/freebsd-update.conf
        mount -t devfs devfs ${iocroot}/base/${_release}/root/dev
        cat /etc/resolv.conf > \
            ${iocroot}/base/${_release}/root/etc/resolv.conf

        case "${_release}" in
            9.3-RELEASE | 10.1-RELEASE)
                chroot ${iocroot}/base/${_release}/root \
                    env UNAME_r="${_release}" env PAGER="/bin/cat" \
                    freebsd-update fetch
                ;;
            *)
                chroot ${iocroot}/base/${_release}/root \
                    env UNAME_r="${_release}" env PAGER="/bin/cat" \
                    freebsd-update --not-running-from-cron fetch
                ;;
            esac

        chroot ${iocroot}/base/${_release}/root \
            env UNAME_r="${_release}" env PAGER="/bin/cat" \
            freebsd-update install
        umount ${iocroot}/base/${_release}/root/dev

        if [ $? -eq 0 ] ; then
            rm -f ${iocroot}/base/${_release}/root/etc/resolv.conf
        fi
    fi

    if [ "${_dist}" = "1" ] ; then
        rm -rf "/usr/local/tmp/iocage-dist"
    fi
}

# reads tag property from given jail dataset
# creates symlink from $iocroot/tags/<tag> to $iocroot/jails/<uuid>
__link_tag () {
    local _dataset _mountpoint _tag _readlink_tag _readlink_mount _tag_date
    _dataset=$1

    if _mountpoint=$(zfs get -H -o value mountpoint $_dataset) ; then
        if _tag=$(zfs get -H -o value org.freebsd.iocage:tag $_dataset); then
            _readlink_mount="$(readlink $iocroot/tags/$_tag)"
            _readlink_tag="$(readlink $iocroot/tags/$_tag | cut -d \/ -f 4)"
            _tag_date=$(date "+%F@%T")
            mkdir -p $iocroot/tags
            if [ ! -e $iocroot/tags/$_tag ] ; then
                ln -s $_mountpoint $iocroot/tags/$_tag
            elif [ -e $iocroot/tags/$_tag ] && [ "$_readlink_mount" != "$_mountpoint" ] ; then
                echo " "
                echo "  WARNING: Replacing tag $_tag!"
                echo "  Renaming $_readlink_tag's tag to $_tag_date."
                echo " "
                # Link new tag to jail, and relink old jail to new tag.
                __set_jail_prop "tag=$_tag_date" "$_readlink_tag"
                ln -shf $_mountpoint $iocroot/tags/$_tag
                ln -s $_readlink_mount $iocroot/tags/$_tag_date
            fi
        fi
    else
        __die "no such dataset: $_dataset!"
    fi
}

# removes all symlinks found in $iocroot/tags pointing to the given jail dataset
__unlink_tag () {
    local _dataset _mountpoint
    _dataset=$1

    if _mountpoint=$(zfs get -H -o value mountpoint $_dataset) ; then
        find $iocroot/tags -type l -lname "${_mountpoint}*" -exec rm -f \{\} \;
    fi
}

# Log error to stderr
__error () {
    echo "  ERROR: $@" >&2
}

# Log error to stderr and exit
__die () {
    echo "  ERROR: $@" >&2
    exit 1
}

# Log info to stdout
__info () {
    echo "  INFO: $@"
}

# Takes two arguments one is which text gets displayed and the other
# is the command
__spinner () {
    local _spinner
    _spinner='/-\|'

    printf "${1}"

    while true; do
        printf '\b%.1s' "${_spinner}"
        _spinner=${_spinner#?}${_spinner%???}
        sleep .1
    done &

    trap "kill $!" 2 3
    $2
    printf "\b%1s\n" "done!" ; kill $! && trap " " 2 3
    return $?
}
