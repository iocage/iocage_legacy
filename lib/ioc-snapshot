#!/bin/sh

__snapshot () {
    local _name _snapshot _dataset _date

    _date=$(date "+%F_%T")

    if [ "$1" = "-r" ] ; then
        shift
        _name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
        _snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"
        _dataset="$(__find_jail $_name)" || exit $?

        if [ -z $_name ] ; then
            __die "missing UUID!"
        fi


        if [ ! -z $_snapshot ] ; then
            zfs snapshot -r ${_dataset}@${_snapshot}
        else
            zfs snapshot -r ${_dataset}@ioc-${_date}
        fi
    else
        _name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
        _snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"
        _dataset="$(__find_jail $_name)" || exit $?

        if [ -z $_name ] ; then
            __die "missing UUID!"
        fi

        if [ ! -z $_snapshot ] ; then
            zfs snapshot ${_dataset}/root@${_snapshot}
        else
            zfs snapshot ${_dataset}/root@ioc-${_date}
        fi
    fi

}


__snapremove () {
    local _name _snap _snapshot _snapshots _dataset
    _name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    _snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"

    if [ -z ${_name} ] || [ -z ${_snapshot} ]; then
        __die "missing UUID or snapshot name!"
    fi

    if [ "$2" ] ; then
        _dataset="$2"
    else
        _dataset="$(__find_jail ${_name})" || exit $?
    fi

    if [ -z ${_dataset} ] ; then
        __die "jail dataset not found"
    fi

    if [ ! -z ${_snapshot} ] && [ "${_snapshot}" != "ALL" ] ; then
        echo "* removing snapshot: ${_snapshot}"
        zfs destroy -r ${_dataset}@${_snapshot}
    elif [ "${_snapshot}" == "ALL" ] ; then
        _snapshots="$(zfs list -d1 -Hrt snapshot -o name ${_dataset})"
        for _snap in $(echo ${_snapshots}) ; do
            zfs destroy -r ${_snap}
        done
    else
        __die "snapshot not found!"
    fi
}

__snaplist () {
    local _name _dataset _fulluuid _snapshots _snapname \
          _creation _used _referenced _snap
    _name="$1"

    if [ -z $_name ] ; then
        __die "missing UUID!"
    fi

    _dataset="$(__find_jail $_name)" || exit $?

    if [ -z $_dataset ] ; then
        __die "$_name not found!"
    fi

    _fulluuid="$(__check_name $_name)"
    _snapshots="$(zfs list -Hrt snapshot -d1 $_dataset | awk '{print $1}')"

    printf "%-13s  %-21s  %s   %s\n" "NAME" "CREATED"\
            "RSIZE" "USED"

    for _snap in $_snapshots ; do
        _snapname=$(echo $_snap|cut -f 2 -d \@)
        _creation="$(zfs get -H -o value creation $_snap)"
        _used="$(zfs get -H -o value used $_snap)"
        _referenced="$(zfs get -H -o value referenced $_snap)"

        printf "%-13s  %-21s  %s    %s\n" "$_snapname" "$_creation"\
                   "$_referenced" "$_used"
    done

}

__rollback () {
    local _name _snapshot _dataset _fs

    _name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    _snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"
    _dataset="$(__find_jail $_name)" || exit $?
    _fs_list=$(zfs list -rH -o name $_dataset)

    if [ ! -z "$_snapshot" ] ; then
        for _fs in $_fs_list ; do
            echo "* Rolling back to ${_fs}@${_snapshot}"
            zfs rollback -r ${_fs}@${_snapshot}
        done
    fi
}

__promote () {
    local _name _dataset _fs_list _origin

    _name="$1"

    if [ -z $_name ] ; then
        __die "missing UUID!"
    fi

    _dataset=$(__find_jail $_name) || exit $?

    if [ -z $_dataset ] ; then
        __die "$_name not found!"
    fi

    _fs_list=$(zfs list -rH -o name $_dataset)

    for _fs in $_fs_list ; do
        _origin="$(zfs get -H -o value origin $_fs)"

        if [ "$_origin" != "-" ] ; then
            echo "* promoting filesystem: $_fs"
            zfs promote $_fs
            continue
        else
            echo "  INFO: filesystem $_fs is not a clone"
        fi
    done
}
