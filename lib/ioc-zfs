#!/bin/sh

# activate pool for iocage
# intended for automation tool
__activate () {
    local _pool
    _pool="$1"

    if [ ! -z ${_pool} ] ; then
        zpool set comment=iocage ${_pool}
    else
        __find_mypool
        echo "pool: ${pool}"
    fi

    exit 0
}

__deactivate () {
    local _pool
    _pool="$1"

    if [ ! -z ${_pool} ] ; then
        zpool set comment=inherit ${_pool}
    fi

    exit 0
}

__clean () {
    local _answer

    # Look for the right switch and then ask the user if they are sure
    case "$1" in
        -a)
            echo " "
            echo "  WARNING: this will destroy $pool/iocage"
            echo " "
            echo "  Please make sure all jails are stopped before continuing."
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "$_answer" == "Y" -o "$_answer" == "y" ] ; then
                echo "  Destroying $pool/iocage"
                zfs destroy -rRf $pool/iocage
                exit 0
            else
                echo "  Command not confirmed.  No action taken."
                exit 1
            fi
        ;;
        -r)
            echo " "
            echo "  WARNING: this will destroy all releases"
            echo " "
            echo "  Please make sure all basejails are stopped before continuing."
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "$_answer" == "Y" -o "$_answer" == "y" ] ; then
                echo "  Destroying $pool/iocage/base"
                zfs destroy -rRf $pool/iocage/base
                echo "  Destroying $pool/iocage/download"
                zfs destroy -rRf $pool/iocage/download
                echo "  Destroying $pool/iocage/releases"
                zfs destroy -rRf $pool/iocage/releases
                exit 0
            else
                echo "  Command not confirmed.  No action taken."
                exit 1
            fi
        ;;
        -j)
            echo " "
            echo "  WARNING: this will destroy all jails"
            echo " "
            echo "  Please make sure all jails are stopped before continuing."
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

            if [ "$_answer" == "Y" -o "$_answer" == "y" ] ; then
                echo "  Destroying $pool/iocage/jails"
                zfs destroy -rRf $pool/iocage/jails
                echo "  Cleaning TAGs at $pool/iocage/tags"
                rm -f ${iocroot}/tags/*
                exit 0
            else
                echo "  Command not confirmed.  No action taken."
                exit 1
            fi
        ;;
    esac
}

__create_basejail () {
    local _release

    _release="$1"

    echo ""
    echo "Creating basejail ZFS datasets... please wait."

    for fs in $(echo $bfs_list) ; do
        zfs create -o compression=lz4 -p $pool/iocage/base/${_release}/root/$fs
    done
}

__reclone_basejail () {
    local name=$1

    if [ -z $name ] ; then
        echo "  ERROR: Missing UUID!"
        exit 1
    fi

    local dataset=$(__find_jail $name)

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found."
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: Multiple matching UUIDs!"
        exit 1
    fi

    local fulluuid="$(__check_name $name)"
    local jail_release="$(__get_jail_prop release $fulluuid)"

    zfs destroy -rRf $pool/iocage/base@$fulluuid
    zfs snapshot -r  $pool/iocage/base@$fulluuid

    echo "* $fulluuid is a basejail, re-cloning jail.."

    # Re-clone required filesystems
    for fs in $bfs_list ; do
        # echo "  re-cloning: $pool/iocage/jails/$fulluuid/root/$fs"
        zfs clone $pool/iocage/base/$jail_release/root/$fs@$fulluuid \
                  $pool/iocage/jails/$fulluuid/root/$fs
    done
}

# This creates jails----------------------------------------------------
__create_jail () {
    local _installed _releases _zfsconfig _supported_release _configured \
          _zfsconfig

    _installed=$(zfs list -r $pool/iocage/releases|grep $release)
    _releases=$(__list_jails -r|grep -v "Downloaded releases:")
    _supported_release=$(echo "$release" | grep "RELEASE")
    _zfsconfig="$(__configure_jail generate)"

    _configured="0"

    if [ -z "$_supported_release" ] ; then
        echo "  You are not running a RELEASE."
        echo "  ERROR: Please specify release=RELEASE."
        exit 1
    fi

    if [ -z "$_installed" -a -z "$_releases" ] ; then
        echo "  ERROR: No RELEASEs found locally, run iocage fetch first."
        exit 1
    elif [ -z "$_installed" ] ; then
        echo "  RELEASE $release not found locally."
        echo "  Please fetch $release or rerun iocage with release=RELEASE"
        echo ""
        echo "  These are the releases you have already fetched:"
        echo "  $_releases"
        exit 1
    fi

    trap "printf '%s\n' 'Refusing to stop now: run \`iocage destroy\` later'" \
    2 3

    if [ "${2}" = "-c" ] ; then
        fs_list=$(zfs list -rH -o name $pool/iocage/releases/$release)
        zfs snapshot -r $pool/iocage/releases/$release@$uuid
        for fs in $fs_list ; do
            cfs=$(echo $fs | sed s#/releases/$release#/jails/$uuid#g)
            eval "zfs clone ${_zfsconfig} \"$fs@$uuid\" \"$cfs\""
        done
        _configured="1"
    elif [ "${2}" = "-e" ] ; then
        eval "zfs create -p ${_zfsconfig} \"$pool/iocage/jails/$uuid\""
        zfs create -p $pool/iocage/jails/$uuid/root
        _configured="1"
    elif [ "${2}" = "-b" ] ; then
        export type=basejail
        zfs snapshot -r $pool/iocage/base@$uuid
        eval "zfs create -p ${_zfsconfig} \"$pool/iocage/jails/$uuid\""
        __set_jail_prop type=basejail ${uuid}
        zfs create -o compression=lz4 -p $pool/iocage/jails/$uuid/root/usr

        for fs in $bfs_list ; do
            zfs clone -o compression=lz4 -o readonly=on \
            $pool/iocage/base/${release}/root/$fs@$uuid \
            $pool/iocage/jails/$uuid/root/$fs
        done

        for dir in $bdir_list ; do
            cp -a $iocroot/base/${release}/root/$dir \
                  $iocroot/jails/$uuid/root/$dir
        done
        _configured="1"
    else
        zfs snapshot -r $pool/iocage/releases/$release@$uuid
        zfs send     -R $pool/iocage/releases/$release@$uuid | \
        zfs recv        $pool/iocage/jails/$uuid
        zfs destroy  -r $pool/iocage/releases/$release@$uuid
        zfs destroy  -r $pool/iocage/jails/$uuid@$uuid
    fi

    if [ "${_configured}" -ne "1" ] ; then
        __configure_jail $pool/iocage/jails/$uuid
    fi

    touch $iocroot/jails/$uuid/fstab

    # remove any residual clone snapshots carried over from the RELEASE datasets
    __snapremove ${uuid}@ALL

    # at create time set the default rc.conf
    if [ "${2}" != "-e" ] ; then
        echo "hostname=\"${hostname}\"" > $iocroot/jails/${uuid}/root/etc/rc.conf
        __jail_rc_conf >> \
        $iocroot/jails/${uuid}/root/etc/rc.conf
        __resolv_conf ${uuid} > $iocroot/jails/${uuid}/root/etc/resolv.conf
    elif [ "${2}" = "-e" ] ; then
        echo $uuid
    fi

    zfs create -o compression=lz4 ${pool}/$jail_zfs_dataset
    zfs set mountpoint=none ${pool}/$jail_zfs_dataset
    zfs set jailed=on ${pool}/$jail_zfs_dataset

    # configure the jail mountpoint
    __hack88_mount ${uuid}

    # Install extra packages
    # this requires working resolv.conf in jail
    if [ "$pkglist" != "none" ] ; then
        __pkg_install "$iocroot/jails/${uuid}/root"
    fi
}

# Cloning jails ----------------------------------------------------------
__clone_jail () {
    local name="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $1 }')"
    local snapshot="$(echo $1 |  awk 'BEGIN { FS = "@" } ; { print $2 }')"
    local _zfsconfig

    if [ -z $name ] ; then
        echo "  ERROR: missing UUID!"
        exit 1
    fi

    local dataset="$(__find_jail $name)"

    if [ -z $dataset ] ; then
        echo "  ERROR: $name not found."
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: Multiple matching UUIDs!"
        exit 1
    fi

    local fs_list="$(zfs list -rH -o name $dataset)"
    _zfsconfig="$(__configure_jail generate)"

    if [ -z "$snapshot" ] ; then
        zfs snapshot -r ${dataset}@${uuid}
        for fs in $fs_list ; do
            cfs="$(echo $fs | sed s#$dataset#$pool/iocage/jails/$uuid#g)"
            if [ $(echo $cfs | grep data$ | wc -l) -eq 1 ] ; then
                zfs clone -o mountpoint=none -o jailed=on $fs@$uuid $cfs
            else
                eval "zfs clone ${_zfsconfig} \"$fs@$uuid\" \"$cfs\""
            fi
        done
    else
        for fs in $fs_list ; do
            cfs="$(echo $fs | sed s#$dataset#$pool/iocage/jails/$uuid#g)"
            if [ $(echo $cfs | grep data$ | wc -l) -eq 1 ] ; then
                zfs clone -o mountpoint=none -o jailed=on $fs@$snapshot $cfs
            else
                eval "zfs clone ${_zfsconfig} \"$fs@$snapshot\" \"$cfs\""
            fi
        done
    fi

    #__configure_jail $pool/iocage/jails/$uuid
    mv $iocroot/jails/$uuid/fstab $iocroot/jails/$uuid/fstab.$name
    touch $iocroot/jails/$uuid/fstab

    cat $iocroot/jails/${uuid}/root/etc/rc.conf | \
    sed -E "s/[a-zA-Z0-9]{8,}-.*-.*-.*-[a-zA-Z0-9]{12,}/$uuid/g" \
    > $iocroot/jails/${uuid}/rc.conf

    mv $iocroot/jails/${uuid}/rc.conf \
    $iocroot/jails/${uuid}/root/etc/rc.conf
}

# Destroy jails --------------------------------------------------------------
__destroy_jail () {
    local _name _answer _uuid_list _force

    if [ -z "$1" ] ; then
        echo "  ERROR: missing UUID!"
        exit 1
    fi

    if [ "$1" == '-f' ] ; then
        _force="1"
        _name="$2"
    else
        _force="0"
        _name="$1"
    fi

    local dataset="$(__find_jail $_name)"

    if [ -z $dataset ] ; then
        echo "  ERROR: $_name not found."
        exit 1
    fi

    if [ $dataset == "multiple" ] ; then
        echo "  ERROR: Multiple matching UUIDs!"
        exit 1
    fi

    local origin="$(zfs get -H -o value origin $dataset)"
    local fulluuid="$(__check_name $_name)"
    local jail_path="$(__get_jail_prop mountpoint $fulluuid)"
    local state="$(jls | grep ${jail_path} | wc -l)"
    local jail_type="$(__get_jail_prop type $fulluuid)"
    local jail_release="$(__get_jail_prop release $fulluuid)"

    if [ "$_force" -ne "1" ] ; then
            echo " "
            echo "  WARNING: this will destroy jail $fulluuid"
            echo "  Dataset: $dataset"
            echo " "
            echo -n "  Are you sure ? y[N]: "
            read _answer

        if [ "$_answer" == "Y" ] || [ "$_answer" == "y" ] ; then
            __destroy_func
        else
            echo "  Command not confirmed.  No action taken."
            exit 1
        fi
    else
        __destroy_func
    fi
}

__destroy_func () {
    if [ "$state" -lt "1" ] ; then
        echo "  Destroying: $fulluuid"
        __unlink_tag $dataset

        zfs destroy -fr $dataset

        if [ "$origin" != "-" ] ; then
            echo "  Destroying clone origin: $origin"
            zfs destroy -r $origin
        fi

        if [ $jail_type == "basejail" ] ; then
            zfs destroy -fr $pool/iocage/base@$fulluuid
        fi

    elif [ "$state" -eq "1" ] ; then
        echo "  ERROR: Jail is up and running. Exiting."
        exit 1
    fi
}

# check if our datasets exist, if not create them
# fixes https://github.com/iocage/iocage/issues/80
__check_filesystems () {

    local _filesystems _missing
    _missing=0

    _filesystems="${iocroot}
                  ${iocroot}/jails
                  ${iocroot}/.defaults
                  ${iocroot}/download
                  ${iocroot}/releases"

    # Loop through and make sure the filesystems exist. Make sure you are root
    for _fs in $(echo ${_filesystems}) ; do
        zfs get -H creation ${pool}${_fs} > /dev/null 2>&1
        if [ $? -ne 0 ] ; then
            _missing=1
            if [ "$(whoami)" != "root" ] ; then
                echo "  ERROR: Please run as root to create missing datasets."
                exit 1
            else
                echo "  INFO: Creating ${pool}${_fs}"
                zfs create -p ${pool}${_fs}
                zfs set mountpoint=${_fs} ${pool}${_fs}
            if [ ${_fs} == "${iocroot}/.defaults" ] ; then
                __reset_jail_props default > /dev/null 2>&1
            fi
          fi
        fi
    done

    if [ ${_missing} -gt 0 ] ; then
        zfs mount -a
    fi
}
