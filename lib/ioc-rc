#!/bin/sh

__start_jail () {
    local _fulluuid_dataset _dataset _fulluuid _jail_type \
          _tag _jail_hostid _jail_path _template _cpuset \
          _procfs _state _vnet _nics _jzfs_dataset _jzfs _clone_check \
          _exec_fib _exec_start

    # Get fulluuid and dataset in one step (dataset is optional)
    _fulluuid_dataset="$(__get_uuid_and_dataset $1 $2)" || exit $?

    set $_fulluuid_dataset

    _fulluuid="$1"
    _dataset="$2"

    __hack88_mount ${_fulluuid} ${_dataset}

    _exec_start="$(__get_jail_prop exec_start $_fulluuid $_dataset)"
    _jail_type="$(__get_jail_prop type $_fulluuid $_dataset)"
    _tag="$(__get_jail_prop tag $_fulluuid $_dataset)"
    _jail_hostid="$(__get_jail_prop hostid $_fulluuid $_dataset)"
    _jail_path="$(__get_jail_prop mountpoint $_fulluuid $_dataset)"
    _template="$(__get_jail_prop template $_fulluuid $_dataset)"
    _cpuset="$(__get_jail_prop cpuset $_fulluuid $_dataset)"
    _procfs="$(__get_jail_prop mount_procfs $_fulluuid $_dataset)"
    _state=$(__is_running $_fulluuid)
    _vnet="$(__get_jail_prop vnet $_fulluuid $_dataset)"
    _exec_fib="$(__get_jail_prop exec_fib $_fulluuid $_dataset)"
    _nics="$(__get_jail_prop interfaces $_fulluuid $_dataset\
           |awk 'BEGIN { FS = "," } ; { print $1,$2,$3,$4 }')"
    _clone_check="$(zfs get -H origin ${_dataset} | awk '{print $3}')"

    if [ "$_state" ] ; then
        echo "* ${_fulluuid}: is already up"
        exit 1
    fi

    if [ $_jail_type == "basejail" ] ; then
        # Re-clone required filesystems
        __reclone_basejail $_fulluuid $_dataset
    fi
    if [ $_jail_type == "jail" ] ; then
        # Check for thick or clone jails and migrate their type
        if [ "${_clone_check}" = "-" ] ; then
            __set_jail_prop type=thickjail ${_fulluuid} \
                ${pool}/iocage/jails/${_fulluuid}
        else
            __set_jail_prop type=clonejail ${_fulluuid} \
                ${pool}/iocage/jails/${_fulluuid}
        fi
    fi

    for i in $_nics ; do
        _nic="$(echo $i | awk 'BEGIN { FS = ":" } ; { print $1 }')"
        _bridge="$(echo $i | awk 'BEGIN { FS = ":" } ; { print $2 }')"

        if [ -z $_nic ] || [ -z $_bridge ] ; then
            echo "  ERROR  : incorrect interfaces property format"
            echo "  HINT   : check with \"iocage get interfaces $_fulluuid\""
            echo "  Example: vnet0:bridge0"
            exit 1
        fi
    done

    if [ $_template == "yes" ] ; then
        echo "  INFO: $_tag is a template jail, ignoring start request."
        echo "        (disable template flag with: iocage set template=no $_tag)"
        return
    fi

    if [ "$_jail_hostid" != "$hostid" ] ; then
        echo "ERROR: hostid mismatch, start failed!"
        echo "    jail hostid: $_jail_hostid"
        echo "  host's hostid: $hostid"
        exit 1
    fi

    if [ "$_procfs" == "1" ] ; then
        mount -t procfs proc ${_jail_path}/root/proc
    fi

    _jzfs="$(__get_jail_prop jail_zfs $_fulluuid $_dataset)"
    _jzfs_dataset="$(__get_jail_prop jail_zfs_dataset $_fulluuid $_dataset)"
    _jzfs_dataset_olen="${#_jzfs_dataset}"
    _jzfs_dataset="${_jzfs_dataset#iocage/jails}"
    _jzfs_dataset_nlen="${#_jzfs_dataset}"

    if [ $_jzfs_dataset_olen -ne $_jzfs_dataset_nlen ] ; then
        _jzfs_dataset="${pool}/iocage/jails${_jzfs_dataset}"
    fi

    if [ $_jzfs == "on" ] ; then
        __set_jail_prop allow_mount=1 $_fulluuid $_dataset
        __set_jail_prop enforce_statfs=1 $_fulluuid $_dataset
        __set_jail_prop allow_mount_zfs=1 $_fulluuid $_dataset
        zfs set jailed=on ${_jzfs_dataset}
    fi

    if [ $_vnet == "on" ] || [ $_vnet == "-" ] ; then
        if [ ! -z $(sysctl -qn kern.features.vimage) ] ; then
            echo "* Starting $_fulluuid ($_tag)"
            __vnet_start $_fulluuid $_dataset

            if [ $? -eq 1 ] ; then
                echo "  ! Start                FAILED"
                exit 1
            else
                echo "  + Started                  OK"
            fi

            echo -n "  + Configuring VNET"
            __networking start $_fulluuid $_dataset

            if [ $? -eq 1 ] ; then
                echo "         FAILED"
                exit 1
            else
                echo "         OK"
            fi
        else
            echo "  ERROR: start failed for $_fulluuid"
            echo "  vnet=on but kernel is not VNET capable!"
            echo "  Turn vnet off for this jail or recompile kernel with VNET."
            exit 1
        fi
    else
        echo "* Starting $_fulluuid ($_tag)"
        __legacy_start $_fulluuid $_dataset
        if [ $? -eq 1 ] ; then
            echo "  ! Start                FAILED"
            exit 1
        else
            echo "  + Started (shared IP mode) OK"
        fi
    fi

    cd ${_jail_path}/root/dev && ln -s ../var/run/log log &

    __rctl_limits $_fulluuid $_dataset

    if [ $_cpuset != "off" ] ; then
        echo -n "  + Appliyng CPU affinity"
        local jid="$(jls -j ioc-${_fulluuid} jid)"
        cpuset -l $_cpuset -j $jid
        if [ $? -eq 1 ] ; then
            echo "    FAILED"
            exit 1
        else
            echo "    OK"
        fi
    fi

    if [ $_jzfs == "on" ] ; then
        zfs jail ioc-${_fulluuid} ${_jzfs_dataset}
        jexec ioc-${_fulluuid} zfs mount -a
    fi

    __resolv_conf ${_fulluuid} ${_dataset} > ${_jail_path}/root/etc/resolv.conf &
    echo -n "  + Starting services"
    setfib $_exec_fib jexec ioc-${_fulluuid} $_exec_start \
     >> $iocroot/log/${_fulluuid}-console.log 2>&1

    if [ $? -eq 1 ] ; then
        echo "        FAILED"
        exit 1
    else
        echo "        OK"
    fi

    zfs set org.freebsd.iocage:last_started=$(date "+%F_%T") $_dataset &

}

# Start a VNET jail
__vnet_start () {
    local _fulluuid _dataset _jail_path _fdescfs _tmpfs

    _fulluuid="$1"
    _dataset="$2"
    _jail_path="$(__get_jail_prop mountpoint $_fulluuid $_dataset)"
    _fdescfs="mount.fdescfs=$(__get_jail_prop mount_fdescfs $_fulluuid $_dataset)"
    _tmpfs="allow.mount.tmpfs=$(__get_jail_prop allow_mount_tmpfs $_fulluuid $_dataset)"

    if [ "$(uname -U)" == "903000" ];
    then
      _fdescfs=""
      _tmpfs=""
    fi

    jail -c vnet \
    name="ioc-$(__get_jail_prop host_hostuuid $_fulluuid $_dataset)" \
    host.hostname="$(__get_jail_prop hostname $_fulluuid $_dataset)" \
    path="${_jail_path}/root" \
    securelevel="$(__get_jail_prop securelevel $_fulluuid $_dataset)" \
    host.hostuuid="$(__get_jail_prop host_hostuuid $_fulluuid $_dataset)" \
    devfs_ruleset="$(__get_jail_prop devfs_ruleset $_fulluuid $_dataset)" \
    enforce_statfs="$(__get_jail_prop enforce_statfs $_fulluuid $_dataset)" \
    children.max="$(__get_jail_prop children_max $_fulluuid $_dataset)" \
    allow.set_hostname="$(__get_jail_prop allow_set_hostname $_fulluuid $_dataset)" \
    allow.sysvipc="$(__get_jail_prop allow_sysvipc $_fulluuid $_dataset)" \
    allow.raw_sockets="$(__get_jail_prop allow_raw_sockets $_fulluuid $_dataset)" \
    allow.chflags="$(__get_jail_prop allow_chflags $_fulluuid $_dataset)" \
    allow.mount="$(__get_jail_prop allow_mount $_fulluuid $_dataset)" \
    allow.mount.devfs="$(__get_jail_prop allow_mount_devfs $_fulluuid $_dataset)" \
    allow.mount.nullfs="$(__get_jail_prop allow_mount_nullfs $_fulluuid $_dataset)" \
    allow.mount.procfs="$(__get_jail_prop allow_mount_procfs $_fulluuid $_dataset)" \
    ${_tmpfs} \
    allow.mount.zfs="$(__get_jail_prop allow_mount_zfs $_fulluuid $_dataset)" \
    allow.quotas="$(__get_jail_prop allow_quotas $_fulluuid $_dataset)" \
    allow.socket_af="$(__get_jail_prop allow_socket_af $_fulluuid $_dataset)" \
    exec.prestart="$(__findscript $_fulluuid prestart $_dataset)" \
    exec.poststart="$(__findscript $_fulluuid poststart $_dataset)" \
    exec.prestop="$(__findscript $_fulluuid prestop $_dataset)" \
    exec.stop="$(__get_jail_prop exec_stop $_fulluuid $_dataset)" \
    exec.clean="$(__get_jail_prop exec_clean $_fulluuid $_dataset)" \
    exec.timeout="$(__get_jail_prop exec_timeout $_fulluuid $_dataset)" \
    stop.timeout="$(__get_jail_prop stop_timeout $_fulluuid $_dataset)" \
    mount.fstab="${_jail_path}/fstab" \
    mount.devfs="$(__get_jail_prop mount_devfs $_fulluuid $_dataset)" \
    ${_fdescfs} \
    allow.dying \
    exec.consolelog="$iocroot/log/${_fulluuid}-console.log" \
    persist
}

# Start a shared IP jail
__legacy_start () {
    local name="$1"
    local _dataset="$2"
    local jail_path="$(__get_jail_prop mountpoint $name $_dataset)"
    local ip4_addr="$(__get_jail_prop ip4_addr $name $_dataset)"
    local ip6_addr="$(__get_jail_prop ip6_addr $name $_dataset)"
    local ip4="$(__get_jail_prop ip4 $name $_dataset)"
    local _exec_fib="$(__get_jail_prop exec_fib $name $_dataset)"

    local fdescfs="mount.fdescfs=$(__get_jail_prop mount_fdescfs $name $_dataset)"
    local tmpfs="allow.mount.tmpfs=$(__get_jail_prop allow_mount_tmpfs $name $_dataset)"

    # Get the default and current interfaces specified
    local default_iface="$(netstat -f inet -nrW | grep '^default' |\
                         awk '{ print $6 }')"
    local cur_ip4_iface=$(echo "$ip4_addr" | cut -d '|' -f 1)
    local cur_ip6_iface=$(echo "$ip6_addr" | cut -d '|' -f 1)

    if [ "$(uname -U)" == "903000" ];
    then
      fdescfs=""
      tmpfs=""
    fi

    if [ $ip4_addr == "none" ] ; then
        ip4_addr=""
    fi

    if [ $ip6_addr == "none" ] ; then
        ip6_addr=""
    fi

    # Change the DEFAULT tag to correct iface
    ip4_addr=$(echo $ip4_addr | sed "s/DEFAULT|/$default_iface|/g")
    ip6_addr=$(echo $ip6_addr | sed "s/DEFAULT|/$default_iface|/g")

    # this is mostly a temporary workaround for https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=196474
    if [ $ip4 == 'inherit' ] ; then
        ip4="inherit"
        ip6="inherit"
        ip4_addr_propline=""
        ip6_addr_propline=""
    else
        ip4_addr_propline="ip4.addr=$ip4_addr"
        ip6_addr_propline="ip6.addr=$ip6_addr"
    fi

    # Check if the user specified they wanted to use an automatic IP4 address
    echo "$ip4_addr" | grep -q "AUTOIP4"
    if [ $? -eq 0 ] ; then
        __get_autoip4
        if [ -z "$cur_ip4_iface" -o "$cur_ip4_iface" == "DEFAULT" ] ; then
            new_iface="DEFAULT"
            ip4_addr_propline="ip4.addr=$default_iface|${auto_ip4}"
        else
            new_iface="$cur_ip4_iface"
            ip4_addr_propline="ip4.addr=$cur_ip4_iface|${auto_ip4}"
        fi
        __set_jail_prop "ip4_addr=$new_iface|${auto_ip4}" $name
    fi

    if [ $ipv6 == "on" ] ; then
        jail -c \
        ${ip4_addr_propline} \
        ip4.saddrsel="$(__get_jail_prop ip4_saddrsel $name $_dataset)" \
        ip4="${ip4}" \
        ${ip6_addr_propline} \
        ip6.saddrsel="$(__get_jail_prop ip6_saddrsel $name $_dataset)" \
        ip6="${ip6}" \
        name="ioc-$(__get_jail_prop host_hostuuid $name $_dataset)" \
        host.hostname="$(__get_jail_prop hostname $name $_dataset)" \
        path="${jail_path}/root" \
        securelevel="$(__get_jail_prop securelevel $name $_dataset)" \
        host.hostuuid="$(__get_jail_prop host_hostuuid $name $_dataset)" \
        devfs_ruleset="$(__get_jail_prop devfs_ruleset $name $_dataset)" \
        enforce_statfs="$(__get_jail_prop enforce_statfs $name $_dataset)" \
        children.max="$(__get_jail_prop children_max $name $_dataset)" \
        allow.set_hostname="$(__get_jail_prop allow_set_hostname $name $_dataset)" \
        allow.sysvipc="$(__get_jail_prop allow_sysvipc $name $_dataset)" \
        allow.raw_sockets="$(__get_jail_prop allow_raw_sockets $name $_dataset)" \
        allow.chflags="$(__get_jail_prop allow_chflags $name $_dataset)" \
        allow.mount="$(__get_jail_prop allow_mount $name $_dataset)" \
        allow.mount.devfs="$(__get_jail_prop allow_mount_devfs $name $_dataset)" \
        allow.mount.nullfs="$(__get_jail_prop allow_mount_nullfs $name $_dataset)" \
        allow.mount.procfs="$(__get_jail_prop allow_mount_procfs $name $_dataset)" \
        ${tmpfs} \
        allow.mount.zfs="$(__get_jail_prop allow_mount_zfs $name $_dataset)" \
        allow.quotas="$(__get_jail_prop allow_quotas $name $_dataset)" \
        allow.socket_af="$(__get_jail_prop allow_socket_af $name $_dataset)" \
        exec.prestart="$(__findscript $name prestart $_dataset)" \
        exec.poststart="$(__findscript $name poststart $_dataset)" \
        exec.prestop="$(__findscript $name prestop $_dataset)" \
        exec.stop="$(__get_jail_prop exec_stop $name $_dataset)" \
        exec.clean="$(__get_jail_prop exec_clean $name $_dataset)" \
        exec.timeout="$(__get_jail_prop exec_timeout $name $_dataset)" \
        exec.fib="$_exec_fib" \
        stop.timeout="$(__get_jail_prop stop_timeout $name $_dataset)" \
        mount.fstab="${jail_path}/fstab" \
        mount.devfs="$(__get_jail_prop mount_devfs $name $_dataset)" \
        ${fdescfs} \
        allow.dying \
        exec.consolelog="$iocroot/log/${name}-console.log" \
        persist
    else
        jail -c \
        ${ip4_addr_propline} \
        ip4.saddrsel="$(__get_jail_prop ip4_saddrsel $name $_dataset)" \
        ip4="${ip4}" \
        name="ioc-$(__get_jail_prop host_hostuuid $name $_dataset)" \
        host.hostname="$(__get_jail_prop hostname $name $_dataset)" \
        path="${jail_path}/root" \
        securelevel="$(__get_jail_prop securelevel $name $_dataset)" \
        host.hostuuid="$(__get_jail_prop host_hostuuid $name $_dataset)" \
        devfs_ruleset="$(__get_jail_prop devfs_ruleset $name $_dataset)" \
        enforce_statfs="$(__get_jail_prop enforce_statfs $name $_dataset)" \
        children.max="$(__get_jail_prop children_max $name $_dataset)" \
        allow.set_hostname="$(__get_jail_prop allow_set_hostname $name $_dataset)" \
        allow.sysvipc="$(__get_jail_prop allow_sysvipc $name $_dataset)" \
        allow.raw_sockets="$(__get_jail_prop allow_raw_sockets $name $_dataset)" \
        allow.chflags="$(__get_jail_prop allow_chflags $name $_dataset)" \
        allow.mount="$(__get_jail_prop allow_mount $name $_dataset)" \
        allow.mount.devfs="$(__get_jail_prop allow_mount_devfs $name $_dataset)" \
        allow.mount.nullfs="$(__get_jail_prop allow_mount_nullfs $name $_dataset)" \
        allow.mount.procfs="$(__get_jail_prop allow_mount_procfs $name $_dataset)" \
        ${tmpfs} \
        allow.mount.zfs="$(__get_jail_prop allow_mount_zfs $name $_dataset)" \
        allow.quotas="$(__get_jail_prop allow_quotas $name $_dataset)" \
        allow.socket_af="$(__get_jail_prop allow_socket_af $name $_dataset)" \
        exec.prestart="$(__findscript $name prestart $_dataset)" \
        exec.poststart="$(__findscript $name poststart $_dataset)" \
        exec.prestop="$(__findscript $name prestop $_dataset)" \
        exec.stop="$(__get_jail_prop exec_stop $name $_dataset)" \
        exec.clean="$(__get_jail_prop exec_clean $name $_dataset)" \
        exec.timeout="$(__get_jail_prop exec_timeout $name $_dataset)" \
        exec.fib="$_exec_fib" \
        stop.timeout="$(__get_jail_prop stop_timeout $name $_dataset)" \
        mount.fstab="${jail_path}/fstab" \
        mount.devfs="$(__get_jail_prop mount_devfs $name $_dataset)" \
        ${fdescfs} \
        allow.dying \
        exec.consolelog="$iocroot/log/${name}-console.log" \
        persist
    fi
}

# Stop completely and start the jail anew
__reboot_jail () {
    __stop_jail "$1" && __start_jail "$1"
}

__stop_jail () {
    local _fulluuid _dataset _fulluuid_dataset _jail_path _tag \
          _exec_prestop _exec_stop _exec_poststop _vnet _state \
          _ip4 _jail_type

    if [ "$1" == "ALL" ] ; then
        __stop_jail_all
        exit $?
    fi

    _fulluuid_dataset="$(__get_uuid_and_dataset $1 $2)" || exit $?

    set $_fulluuid_dataset

    _fulluuid="$1"
    _dataset="$2"

    _jail_type="$(__get_jail_prop type $_fulluuid $_dataset)"
    _jail_path="$(__get_jail_prop mountpoint $_fulluuid $_dataset)"
    _tag="$(__get_jail_prop tag $_fulluuid $_dataset)"
    _exec_prestop="$(__findscript $_fulluuid prestop $_dataset)"
    _exec_stop="$(__get_jail_prop exec_stop $_fulluuid $_dataset)"
    _exec_poststop="$(__findscript $_fulluuid poststop $_dataset)"
    _vnet="$(__get_jail_prop vnet $_fulluuid $_dataset)"
    _state="$(__is_running $_fulluuid)"
    _ip4="$(__get_jail_prop ip4 $_fulluuid $_dataset)"

    if [ -z "$_state" ] ; then
        echo "* ${_fulluuid}: is already down"
        exit 1
    fi

    echo "* Stopping $_fulluuid ($_tag)"

    echo -n "  + Running pre-stop"
    eval "$_exec_prestop"
    if [ $? -ne 1 ] ; then
        echo "         OK"
    else
        echo "     FAILED"
    fi

    echo -n "  + Stopping services"

    jexec ioc-${_fulluuid} $_exec_stop >> $iocroot/log/${_fulluuid}-console.log 2>&1

    if [ $? -ne 1 ] ; then
        echo "        OK"
    else
        echo "    FAILED"
    fi

    if [ $_vnet == "on" ] ; then
        echo -n "  + Tearing down VNET"
        __networking stop $_fulluuid $_dataset
        if [ $? -eq 1 ] ; then
            echo "        FAILED"
        else
            echo "        OK"
        fi
    else
        # don't try to tear down networking if we have "inherit" set
        if [ "$_ip4" != 'inherit' ] ; then
            __stop_legacy_networking $_fulluuid $_dataset
        fi
    fi

    echo -n "  + Removing jail process"
    jail -r ioc-${_fulluuid}

    if [ $? -ne 1 ] ; then
        echo "    OK"
    else
        echo "FAILED"
    fi

    echo -n "  + Running post-stop"
    eval "$_exec_poststop"
    if [ $? -ne 1 ] ; then
        echo "        OK"
    else
        echo "    FAILED"
    fi

    umount -afvF ${_jail_path}/fstab > /dev/null 2>&1
    umount ${_jail_path}/root/dev/fd > /dev/null 2>&1
    umount ${_jail_path}/root/dev    > /dev/null 2>&1
    umount ${_jail_path}/root/proc   > /dev/null 2>&1

    if [ $_jail_type = "basejail" ] ; then
        umount ${_jail_path}/root/tmp        > /dev/null 2>&1
        umount ${_jail_path}/root/etc        > /dev/null 2>&1
        umount ${_jail_path}/root/usr/local  > /dev/null 2>&1
        umount ${_jail_path}/root/usr/home   > /dev/null 2>&1
        umount ${_jail_path}/root/usr/ports  > /dev/null 2>&1
        umount ${_jail_path}/root/var        > /dev/null 2>&1
        umount ${_jail_path}/root/root       > /dev/null 2>&1
        zfs    umount ${_jail_path}/root     > /dev/null 2>&1
    fi

    if [ -d $iocroot/jails/${_fulluuid}/recorded ] ; then
        umount -ft unionfs $iocroot/jails/${_fulluuid}/root > /dev/null 2>&1
    fi

    if [ ! -z $(sysctl -qn kern.features.rctl) ] ; then
        local rlimits="$(rctl | grep $_fulluuid| wc -l)"
        if [ $rlimits -gt "0" ] ; then
            rctl -r jail:ioc-${_fulluuid}
        fi
    fi
}

__stop_jail_all () {
    local _jails _state
    _jails=$(__find_jail ALL)
    for _jail in ${_jails} ; do
        _juuid=$(zfs get -H -o value org.freebsd.iocage:host_hostuuid \
               ${_jail})
        _state="$(__is_running ${_juuid} ; echo $?)"
        while [ "${_state}" != "0" ] ; do
            __stop_jail ${_juuid}
            break
        done
    done
    return $?
}

# Soft restart
__restart_jail () {
    local name="$1"

    if [ -z $name ] ; then
        __die "missing UUID!"
    fi

    local dataset="$(__find_jail $name)" || exit $?

    if [ -z $dataset ] ; then
        __die "$name not found!"
    fi

    local fulluuid="$(__check_name $name)"
    local exec_stop="$(__get_jail_prop exec_stop $fulluuid)"
    local exec_start="$(__get_jail_prop exec_start $fulluuid)"
    local jid="$(jls -j ioc-${fulluuid} jid)"
    local tag="$(__get_jail_prop tag $fulluuid)"

    echo "* Soft restarting $fulluuid ($tag)"
    jexec ioc-${fulluuid} $exec_stop >> $iocroot/log/${fulluuid}-console.log 2>&1

    if [ $? -ne "1" ] ; then
        pkill -j $jid
        jexec ioc-${fulluuid} $exec_start >> $iocroot/log/${fulluuid}-console.log 2>&1
        zfs set org.freebsd.iocage:last_started=$(date "+%F_%T") $dataset
    else
        __die "soft restart failed!"
    fi
}

__rc_jails () {
    local action=$1
    local jails=$(__find_jail ALL)
    local boot_list="/tmp/iocage.$$"

    for jail in $jails ; do
        local name="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid \
                    $jail)"
        local boot="$(zfs get -H -o value org.freebsd.iocage:boot $jail)"
        local _jail_hostid="$(zfs get -H -o value org.freebsd.iocage:hostid \
                    $jail)"
        local priority="$(zfs get -H -o value org.freebsd.iocage:priority \
                    $jail)"

        if [ "$boot" == "on" -a "$_jail_hostid" == "$hostid" ] ; then
            echo "${priority},${name}" >> $boot_list
        fi
    done

    if [ -e $boot_list ] ; then
        local boot_order=$(sort -n $boot_list)
        local shutdown_order=$(sort -rn $boot_list)
    else
        __info "no jails found with property boot=on or
        echo "        with hostid: $hostid on this host, exiting.."
        exit 0
    fi

    if [ "$action" == "boot" ] ; then
        echo "* [I|O|C] booting jails... "

        for i in $boot_order ; do
            local jail="$(echo $i | cut -f2 -d,)"
            local _priority="$(echo $i | cut -f1 -d,)"
            local _dataset="${pool}/iocage/jails/${jail}"
            local jail_path="$(__get_jail_prop mountpoint $jail $_dataset)"
            local state="$(jls | grep ${jail_path} | wc -l)"

            if [ "$state" -lt "1" ] && [ "$_priority" -eq 99 ] ; then
                echo "* Executing background start for $jail"
                __start_jail $jail $_dataset > /var/tmp/${jail} 2>&1 && cat /var/tmp/${jail} &
                sleep 1
            else
                __start_jail $jail $_dataset
            fi

        done
    elif [ "$action" == "shutdown" ] ; then
        echo "* [I|O|C] shutting down jails... "

        for i in $shutdown_order ; do
            local jail="$(echo $i | cut -f2 -d,)"
            local _dataset="${pool}/iocage/jails/${jail}"
            local jail_path="$(__get_jail_prop mountpoint $jail $_dataset)"
            local state="$(jls | grep ${jail_path} | wc -l)"

            if [ "$state" -eq "1" ] ; then
                __stop_jail $jail $_dataset
            fi
        done

    fi
    rm $boot_list
}
