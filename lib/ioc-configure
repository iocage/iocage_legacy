#!/bin/sh

# Configure properties -------------------------------------------------
__configure_jail () {
    local _value _CONF

    _CONF="$CONF_NET
           $CONF_JAIL
           $CONF_RCTL
           $CONF_CUSTOM
           $CONF_SYNC
           $CONF_GIT"

    for prop in $_CONF ; do
        prop_name=$prop
        eval prop="\$${prop}"
        if [ ! -z "$prop" ] ; then
            case "${prop_name}" in
                tag) _value="${tag}"
                    ;;
                host_domainname) _value="${host_domainname}"
                    ;;
                host_hostname) _value="${host_hostname}"
                    ;;
                host_hostuuid) _value="${host_hostuuid}"
                    ;;
                jail_zfs_dataset) _value="${jail_zfs_dataset}"
                    ;;
                base) case "${base}" in
                          "-") base="$(zfs get -H -o value org.freebsd.iocage:base $1)"
                              ;;
                      esac
                      _value="${base}"
                    ;;
                basedirs) _value="${basedirs}"
                    ;;
                hack88) _value="${hack88}"
                    ;;
                resolver) _value="${resolver}"
                    ;;
                ip4_autostart) _value="${ip4_autostart}"
                    ;;
                ip4_autoend) _value="${ip4_autoend}"
                    ;;
                ip4_autosubnet) _value="${ip4_autosubnet}"
                    ;;
                type) _value="${type}"
                    ;;
                boot) _value="${boot}"
                    ;;
                vnet) _value="${vnet}"
                    ;;
                mount_procfs) _value="${mount_procfs}"
                    ;;
                mount_linprocfs) _value="${mount_linprocfs}"
                    ;;
                gitlocation) case "${gitlocation}" in
                                 "-") gitlocation="https://github.com"
                                     ;;
                             esac
                             _value="${gitlocation}"
                    ;;
                vnet0_mac) case "${vnet0_mac}" in
                               "-") vnet0_mac="none"
                                   ;;
                           esac
                           _value="${vnet0_mac}"
                    ;;
                vnet1_mac) case "${vnet1_mac}" in
                               "-") vnet1_mac="none"
                                   ;;
                           esac
                           _value="${vnet1_mac}"
                    ;;
                vnet2_mac) case "${vnet2_mac}" in
                               "-") vnet2_mac="none"
                                   ;;
                           esac
                           _value="${vnet2_mac}"
                    ;;
                vnet3_mac) case "${vnet3_mac}" in
                               "-") vnet3_mac="none"
                                   ;;
                           esac
                           _value="${vnet3_mac}"
                    ;;
                *) _value="${prop}"
                    ;;
            esac

            if [ "$1" != "generate" ] ; then
                echo "** $prop_name=$_value"
                zfs set org.freebsd.iocage:$prop_name="$_value" $1
                unset _value
            elif [ "$1" == "generate" ] ; then
                echo -n "-o org.freebsd.iocage:$prop_name=\"$_value\" "
            fi
        fi
    done

    for prop in $CONF_ZFS ; do
        prop_name=$prop
        eval prop="\$${prop}"
        if [ ! -z "$prop" ] && [ "$prop" != "readonly" ] ; then
            _value="$prop"

            if [ "$1" != "generate" ] ; then
                echo "** $prop_name=$_value"
                zfs set $prop_name="$_value" $1
            elif [ "$1" == "generate" ] ; then
                echo -n "-o $prop_name=\"$_value\" "
            fi
        fi
    done
}

__jail_rc_conf () {
cat << EOT

cron_flags="$cron_flags -J 15"

# Disable Sendmail by default
sendmail_enable="NONE"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"

# Run secure syslog
syslogd_flags="-c -ss"

# Enable IPv6
ipv6_activate_all_interfaces="YES"
EOT
}

# This is mostly for pkg autoinstall
# expects fulluuid to be passed in as $1
__resolv_conf () {
    local _name _resolver _resolver_default _fulluuid _dataset
    _fulluuid="$1"
    _dataset="$2"
    _default_resolver="$(__get_default_prop resolver default)"
    _resolver="$(__get_jail_prop resolver $_fulluuid $_dataset)"

    if [ "${_resolver}" != "none" ] ; then
        echo "${_resolver}" | tr \; \\n
    elif [ "${_resolver}" == "none" ] && [ "${_default_resolver}" != "none" ] ; then
        echo "${_default_resolver}" | tr \; \\n
    else
        cat /etc/resolv.conf
    fi
}

__pkg_install () {
    local _chrootdir="$1"

    if [ -e $pkglist ] ; then
        echo "* Installing extra packages.."
        for i in $(cat $pkglist) ; do
            __info "installing: $i"
            pkg -c $_chrootdir install -qy $i
        done
    fi
}

__reset_jail_props () {
    local _name _dataset uuid tag
    _name=$1

    if [ -z "$_name" ] ; then
        __die "missing UUID!"
    fi

    _dataset="$(__find_jail $_name)" || exit $?

    if [ -z "$_dataset" ] ; then
        __die "$_name not found!"
    fi

    if [ $_name == "ALL" ] ; then
        echo " "
        echo "  WARNING: This will reset ALL jails!"
        echo " "
        echo -n "  Are you sure? y[N]: "
        read answer
        if [ "$answer" == "Y" ] || [ "$answer" == "y" ] ; then
            echo "  Resetting all jails."

            __reset_jail_props_all

            exit 0
        else
            echo "  Command not confirmed.  No action taken."
            exit 1
        fi
    fi

    # Cache properties to set again later
    uuid="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $_dataset)"
    host_hostuuid="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $_dataset)"
    tag="$(zfs get -H -o value org.freebsd.iocage:tag $_dataset)"
    vnet0_mac="$(zfs get -H -o value org.freebsd.iocage:vnet0_mac $_dataset)"
    vnet1_mac="$(zfs get -H -o value org.freebsd.iocage:vnet1_mac $_dataset)"
    vnet2_mac="$(zfs get -H -o value org.freebsd.iocage:vnet2_mac $_dataset)"
    vnet3_mac="$(zfs get -H -o value org.freebsd.iocage:vnet3_mac $_dataset)"
    basedirs="$(zfs get -H -o value org.freebsd.iocage:basedirs $_dataset)"
    hack88="$(zfs get -H -o value org.freebsd.iocage:hack88 $_dataset)"
    jail_zfs_dataset="$(zfs get -H -o value org.freebsd.iocage:jail_zfs_dataset\
        $_dataset)"
    resolver="$(zfs get -H -o value org.freebsd.iocage:resolver $_dataset)"
    ip4_autostart="$(zfs get -H -o value org.freebsd.iocage:ip4_autostart\
        $_dataset)"
    ip4_autoend="$(zfs get -H -o value org.freebsd.iocage:ip4_autoend\
        $_dataset)"
    ip4_autosubnet="$(zfs get -H -o value org.freebsd.iocage:ip4_autosubnet\
        $_dataset)"
    gitlocation="$(zfs get -H -o value org.freebsd.iocage:gitlocation $_dataset)"
    type="$(zfs get -H -o value org.freebsd.iocage:type $_dataset)"
    boot="$(zfs get -H -o value org.freebsd.iocage:boot $_dataset)"
    vnet="$(zfs get -H -o value org.freebsd.iocage:vnet $_dataset)"
    host_hostname="$(zfs get -H -o value org.freebsd.iocage:host_hostname $_dataset)"
    mount_procfs="$(zfs get -H -o value org.freebsd.iocage:mount_procfs $_dataset)"
    mount_linprocfs="$(zfs get -H -o value org.freebsd.iocage:mount_linprocfs $_dataset)"

    __configure_jail $_dataset
}

__reset_jail_props_all () {
    local _jails _dataset
    _jails="$(__find_jail ALL)"

    for jail in $_jails ; do
        _dataset="$(zfs get -H -o value org.freebsd.iocage:host_hostuuid $jail)"
        __reset_jail_props "$_dataset"
    done
}
